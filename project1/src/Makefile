CXX_DIR = ../lib/cxxtest
CXXTEST = $(CXX_DIR)/cxxtestgen.pl
CXXFLAGS = --error-printer --abort-on-fail --have-eh

FLAGS = -Wall -g

cffc:	cffc.cpp
	g++ -o cffc cffc.cpp

all:	squareMapper abstar sumOfSquares box

squareMapper:
	make -f Makefile_Robot clean
	./cffc ../samples/squareMapper.cff
	make -f Makefile_Robot

	./machine 1 2 3 > squareMapper_1_2_3.out
	diff squareMapper_1_2_3.out squareMapper_1_2_3.expected
	./machine 4 5 6 > squareMapper_4_5_6.out
	diff squareMapper_4_5_6.out squareMapper_4_5_6.expected
	./machine 7 > squareMapper_7.out
	diff squareMapper_7.out squareMapper_7.expected

abstar:	
	make -f Makefile_Robot clean
	./cffc ../samples/abstar.cff
	make -f Makefile_Robot

	./machine abab > abstar_abab.out
	diff abstar_abab.out abstar_abab.expected

	./machine aabb > abstar_aabb.out
	diff abstar_aabb.out abstar_aabb.expected

sumOfSquares:
	make -f Makefile_Robot clean
	./cffc ../samples/sumOfSquares.cff
	make -f Makefile_Robot

	./machine 1 > sumOfSquares_1.out
	diff sumOfSquares_1.out sumOfSquares_1.expected

	./machine 4 > sumOfSquares_4.out
	diff sumOfSquares_4.out sumOfSquares_4.expected

box:	
	make -f Makefile_Robot clean
	./cffc ../samples/box.cff
	make -f Makefile_Robot

	./machine > box.out
	diff box.out box.expected


machine:	    Machine.o RunTime.o 
	g++ -g -o machine Machine.o RunTime.o

# Machine.h and Machine.cpp are generated by the C-FishFish translator.
# The same files names are used for every C-FishFish program.
Machine.o:	Machine.cpp Machine.h RunTime.h
	g++ -c Machine.cpp

Machine.cpp:
	cp ../cffc/Machine.cpp_abstar Machine.cpp
	
Machine.h:
	cp ../cffc/Machine.h_abstar Machine.h

# RunTime.cpp and RunTime.h are hand-written and contain code needed
# for all the different platforms.
RunTime.o:	RunTime.cpp RunTime.h
	g++ -g -c RunTime.cpp

# Program files.
readInput.o:	readInput.cpp readInput.h
	g++ $(FLAGS) -std=c++0x -c readInput.cpp 

regex.o:	regex.cpp regex.h
	g++ $(FLAGS) -c regex.cpp 

scanner.o:	scanner.cpp scanner.h
	g++ $(FLAGS) -std=c++0x -c scanner.cpp

parser.o:	parser.cpp parser.h
	g++ $(FLAGS) -std=c++0x -c parser.cpp

extToken.o:	extToken.cpp extToken.h
	g++ $(FLAGS) -c extToken.cpp

parseResult.o:	parseResult.cpp parseResult.h 
	g++ $(FLAGS) -std=c++0x -c parseResult.cpp
	
ASTNode.o:	ASTNode.cpp ASTNode.h 
	g++ $(FLAGS) -std=c++0x -c ASTNode.cpp

Functional.o:	Functional.h 
	g++ $(FLAGS) -std=c++0x -c Functional.h

MyIterator.o:	MyIterator.h MyIterator.cpp
	g++ $(FLAGS) -std=c++0x -c MyIterator.h

# Testing files and targets.
run-tests:	regex_tests scanner_tests parser_tests ast_tests
	./regex_tests
	./scanner_tests
	./parser_tests
	./ast_tests


regex_tests:	regex_tests.cpp regex.o
	g++ $(FLAGS) -I$(CXX_DIR) -o regex_tests regex.o regex_tests.cpp

regex_tests.cpp:	regex.h regex_tests.h
	$(CXXTEST) $(CXXFLAGS) -o regex_tests.cpp regex_tests.h

scanner_tests:	scanner_tests.cpp scanner.o regex.o readInput.o
	g++ $(FLAGS) -I$(CXX_DIR)  -o scanner_tests \
		scanner.o regex.o readInput.o scanner_tests.cpp

scanner_tests.cpp:	scanner.o scanner_tests.h readInput.h
	$(CXXTEST) $(CXXFLAGS) -o scanner_tests.cpp scanner_tests.h readInput.h

parser_tests:	parser_tests.cpp parser.o readInput.o extToken.o regex.o scanner.o parseResult.o
	g++ $(FLAGS) -I$(CXX_DIR) -o parser_tests parser.o extToken.o regex.o scanner.o parseResult.o readInput.o parser_tests.cpp

parser_tests.cpp:	parser.o parser_tests.h
	$(CXXTEST) $(CXXFLAGS) -o parser_tests.cpp parser_tests.h

ast_tests:	ast_tests.cpp readInput.o extToken.o regex.o scanner.o parseResult.o parser.o Functional.o MyIterator.o ASTNode.o
	g++ $(FLAGS) -I$(CXX_DIR) -o ast_tests extToken.o regex.o scanner.o parseResult.o readInput.o parser.o ASTNode.o Functional.o MyIterator.o ast_tests.cpp

ast_tests.cpp:	ast_tests.h
	$(CXXTEST) $(CXXFLAGS) -o ast_tests.cpp ast_tests.h


clean:
	rm -Rf *.o \
		regex_tests regex_tests.cpp \
		scanner_tests scanner_tests.cpp \
		parser_tests parser_tests.cpp \
		ast_tests ast_tests.cpp \
		machine
